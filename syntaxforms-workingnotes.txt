Dependent Chained Dropdown Select Lists
https://plainenglish.io/blog/python-and-django-create-a-dependent-chained-dropdown-select-list-b2c796f5a11

1 - download - https://github.com/dr5hn/countries-states-cities-database
2 - create new folder called data inside the static folder & add JSON file there - path to where JSON file is saved: filepath = './static/data/countries_states_cities.json'

DONT USE THE ABOVE- uses AJAX and JQuery

1 - bootstrapping Next.js - doumentation - https://nextjs.org/ and https://nextjs.org/docs

npx create-next-app name-of-your-app

DONT USE THE ABOVE EITHER 

Dropdown data binding with REACT hooks - https://www.carlrippon.com/drop-down-data-binding-with-react-hooks/
SWAPI - Star Wars API - https://pipedream.com/apps/swapi

1 - start with REACT: 

import React from "react";
import "./styles.css";

function CharacterDropDown() {
  const [loading, setLoading] = React.useState(true);
  const [items, setItems] = React.useState([]);
  const [value, setValue] = React.useState("R2-D2");
  React.useEffect(() => {
    let unmounted = false;
    async function getCharacters() {
      const response = await fetch(
        "https://cors-anywhere.herokuapp.com/https://swapi.dev/api/people"
      );
      const body = await response.json();
      if (!unmounted) {
        setItems(
          body.results.map(({ name }) => ({ label: name, value: name }))
        );
        setLoading(false);
      }
    }
    getCharacters();
    return () => {
      unmounted = true;
    };
  }, []);

  return (
    <select
      disabled={loading}
      value={value}
      onChange={(e) => setValue(e.currentTarget.value)}
    >
      {items.map(({ label, value }) => (
        <option key={value} value={value}>
          {label}
        </option>
      ))}
    </select>
  );
}

export default function App() {
  return (
    <div className="App">
      <CharacterDropDown />
    </div>
  );
}